#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
profiling

Profiling tool to analyze the time consumed by each part of the package.

Installation:
    brew install graphviz
    pip install pycallgraph==1.0.1

Example:
    # will run single and group analysis over all test cases
    python profiling

    import profiling
    profiling.main()

The output is a png file, but it can be changed to a Gephi output than can be
analyzed with Gephi.

If you want to use KCacheGrind or QCacheGrind (the Mac version) you can use
the yappi version of the single analysis. Both can read the .callgrind file
generated by yappi.

Installation:
    brew install qcachegrind
    - or -
    sudo port install kcachegrind4

    pip install yappi
"""

from __future__ import unicode_literals
from pycallgraph import PyCallGraph
from pycallgraph import Config
from pycallgraph import GlobbingFilter
from pycallgraph.output import GraphvizOutput
# from pycallgraph.output import GephiOutput
import sys

import shapefile
from path_finders import get_transport_shp_path, get_division_path
from geo_utils import get_shapely_shapes
from reachability import calc_reachable_surface_and_people


REL_WORKING_DIR = r"tests\integration_cases"
PACKAGE_NAME = "xlseries"


def _prepare_test_case():
    path_colectivos = get_transport_shp_path("recorrido-colectivos")
    path_radios = get_division_path("radios_censo_2010")

    sf_lines = shapefile.Reader(path_colectivos)
    lines = get_shapely_shapes(sf_lines)

    sf_polys = shapefile.Reader(path_radios)
    polys = get_shapely_shapes(sf_polys)
    ids = [record[0] for record in sf_polys.records()]
    radios = {id: polygon for id, polygon in zip(ids, polys)}
    radio = radios["14_1_8"]

    return radio, lines


def _run_test_case(radio, lines):
    """Run an integration test case."""
    calc_reachable_surface_and_people(radio, lines)


def single_analysis(config, name):
    """Perform profiling analysis for each test case, separately."""
    # graphviz = GephiOutput()
    graphviz = GraphvizOutput()
    graphviz.output_file = name

    print "Preparing test case..."
    radio, lines = _prepare_test_case()

    print "Running test case..."
    with PyCallGraph(output=graphviz, config=config):
        _run_test_case(radio, lines)


def main(name=None):
    name = name or "1"
    filename = "profiling_test_{}.png".format(name)
    config = Config()
    config.trace_filter = GlobbingFilter(exclude=[
        'a_module_you_want_to_exclude.*',
        '*.a_function_you_want_to_exclude',
    ])

    single_analysis(config, filename)

if __name__ == '__main__':
    if len(sys.argv) == 2:
        main(sys.argv[1])
    else:
        main()
